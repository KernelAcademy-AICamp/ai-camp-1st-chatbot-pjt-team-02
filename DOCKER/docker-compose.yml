version: '3.8'

services:
  # =====================================
  # PostgreSQL - 관계형 데이터베이스
  # =====================================
  postgres:
    image: postgres:15-alpine
    container_name: kongdak_postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kongdak_db}
      POSTGRES_USER: ${POSTGRES_USER:-kongdak_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/data_preprocessing/schema:/docker-entrypoint-initdb.d
    networks:
      - kongdak_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kongdak_user} -d ${POSTGRES_DB:-kongdak_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =====================================
  # MongoDB - 벡터 DB & 캐시
  # =====================================
  mongo:
    image: mongo:6.0
    container_name: kongdak_mongo
    restart: unless-stopped
    ports:
      - "${MONGO_PORT:-27017}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-changeme}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-kongdak_vectors}
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    networks:
      - kongdak_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =====================================
  # Redis - 캐시 & 세션
  # =====================================
  redis:
    image: redis:7-alpine
    container_name: kongdak_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    networks:
      - kongdak_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =====================================
  # FastAPI - AI 백엔드
  # =====================================
  fastapi:
    build:
      context: ./BACKEND/fastapi
      dockerfile: Dockerfile
    container_name: kongdak_fastapi
    restart: unless-stopped
    ports:
      - "${FASTAPI_PORT:-8000}:8000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-kongdak_user}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-kongdak_db}
      MONGO_URL: mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-changeme}@mongo:27017/${MONGO_DB:-kongdak_vectors}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o-mini}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kongdak_network
    volumes:
      - ./BACKEND/fastapi/app:/app/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # =====================================
  # Nest.js - 인증 & CRUD 백엔드
  # =====================================
  nestjs:
    build:
      context: ./BACKEND/nestjs
      dockerfile: Dockerfile
    container_name: kongdak_nestjs
    restart: unless-stopped
    ports:
      - "${PORT:-3001}:3001"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-kongdak_user}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-kongdak_db}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1h}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      NODE_ENV: ${NODE_ENV:-development}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kongdak_network
    volumes:
      - ./BACKEND/nestjs/src:/app/src
    command: npm run start:dev

  # =====================================
  # Next.js - 프론트엔드
  # =====================================
  nextjs:
    build:
      context: ./FRONTEND
      dockerfile: Dockerfile
    container_name: kongdak_nextjs
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    depends_on:
      - fastapi
      - nestjs
    networks:
      - kongdak_network
    volumes:
      - ./FRONTEND:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

  # =====================================
  # Streamlit - 데이터 시각화
  # =====================================
  streamlit:
    build:
      context: ./FRONTEND/streamlit
      dockerfile: Dockerfile
    container_name: kongdak_streamlit
    restart: unless-stopped
    ports:
      - "${STREAMLIT_PORT:-8501}:8501"
    environment:
      FASTAPI_URL: http://fastapi:8000
    depends_on:
      - fastapi
    networks:
      - kongdak_network
    volumes:
      - ./FRONTEND/streamlit:/app
    command: streamlit run app.py --server.address=0.0.0.0 --server.port=8501

networks:
  kongdak_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  mongo_config:
    driver: local
  redis_data:
    driver: local
