Streamlit AI 분석 서브 페이지 설계서
파일명: Streamlit AI 분석 서브 페이지 설계서.text
작성일: 2025-10-16

요약
----
Next.js 메인 UI에서 링크로 연결되는 Streamlit 기반의 'AI 분석 서브 페이지' 설계서입니다.
목적은 FastAPI(AI 서버)가 반환한 분석 결과(이미지 분석, 레시피 분석, 영양 시각화, 임베딩 검색 결과 등)를
직관적으로 시각화하고, 영양 교육용 인터랙션(퀴즈, 설명 팝업)을 제공하는 것입니다.
Streamlit은 AI/데이터 시각화에 특화되어 있어 차트·테이블·이미지·파일 업로드 중심의 기능을 담당합니다.

주요 설계 원칙
----------------
1. 경량 연결성: Streamlit은 메인 앱(Next.js)에서 링크로 열거나 새 탭으로 호출하는 방식.
   - Next.js에서 "AI 분석 결과 보기" 버튼 클릭 시 job_id를 쿼리 파라미터로 전달: /streamlit/analysis?job_id=...
2. 보안: 민감 정보(개인 식단/혈액 검사 값)는 Streamlit에서 직접 노출하지 않음.
   - Streamlit은 분석 결과 시각화(비식별화 데이터)만 표시.
   - 인증은 Next.js에서 발급한 쿠키(JWT httpOnly) 또는 임시 뱃지(token)를 통해 검증.
3. 재현성: 동일 job_id로 접근 시 항상 동일한 결과(캐시) 보여주기.
4. 접근성: 큰 폰트, 명확한 색(안전: 녹색, 주의: 노랑, 위험: 빨강) 사용.

페이지 구성 (섹션)
------------------
1) 헤더
 - 로고, 페이지 제목: "콩닥 식탁 — AI 분석 리포트"
 - job_id 표시, 생성일시
 - "원본으로 돌아가기" 버튼 (Next.js 대시보드로 복귀)

2) 상단 요약 카드 (summary panel)
 - 탐지된 요리명 (Detected Dish)
 - 총 칼륨(K), 인(P), 나트륨(Na) 수치 (per serving)
 - 안전 등급 배지 (K_status, P_status, Na_status) — 색상으로 구분
 - 권장 행동: "의료진 상담 필요" 또는 "대체 레시피 확인"

3) 이미지 / 원본 섹션
 - 업로드된 음식 이미지(썸네일 및 확대)
 - 이미지에 감지된 바운딩 박스(옵션, 제공 시)
 - "이미지 원본 다운로드" 버튼

4) 구성 성분 테이블
 - 컬럼: 순번, 재료명(링크: foods 테이블 상세), 매칭 confidence, amount_g, K(mg), P(mg), Na(mg), substitute_suggestion
 - 각 재료명 클릭 시 우측 패널에 상세 팝업(대체재, 출처 링크, 영양정보)

5) 영양 요약 차트
 - 파이/도넛 차트: 칼로리, 단백질, 탄수화물, 지방 비율
 - 누적 막대 그래프: K, P, Na 비교 (사용자 limit 대비 %)
 - 타임라인(선택): 하루 권장 섭취 대비 현재 식사 비율(만약 여러 식사 job이 있다면)

6) 대체재 제안 섹션
 - 원본 재료 → 추천 대체재 리스트(우선순위별)
 - 각 항목에 '대체 후 예상 총합' 버튼을 클릭하면 새로 계산된 Totals를 보여줌 (동적 API 호출)
 - '레시피 수정 적용' 버튼 (클릭 시 수정된 레시피를 recipes로 임시 저장하거나 Next.js 편집 화면으로 이동)

7) AI 설명 및 근거(Explainability)
 - LLM이 판단한 근거 텍스트(프롬프트, 출처 문장 일부, 계산식 요약)
 - "근거 더 보기" 토글로 상세 프롬프트/임베딩 매칭 라인 표시

8) 퀴즈/교육 모듈
 - 자동 생성된 3문제 표시 (MCQ/TRUE-FALSE)
 - 사용자가 응답하면 즉시 채점 및 해설 제공
 - 퀴즈 결과는 MongoDB.feedbacks에 저장

9) 로그/원시응답(개발용 탭, 권한 필요)
 - LLM 원문 응답, 사용된 토큰 수, latency, request-id
 - 오류 발생 시 재시도 버튼 (재요청 기능)

10) 하단 Footer
 - 데이터 출처 (국가표준식품성분표 등)
 - 법적고지: "의료 조언 아님 — 담당 의료진 상담 권장"
 - 버전 정보 (서비스 버전, LLM 모델, DB 스냅샷 날짜)

데이터 흐름
-----------
1. Next.js에서 분석 요청 → FastAPI의 /ai/analyze-image 또는 /ai/analyze-recipe 엔드포인트 호출.
2. FastAPI는 분석 결과를 DB(Postgres for structured, Mongo for embeddings/cache) 및 S3(이미지) 저장하고 job_id 반환.
3. Next.js는 Streamlit 페이지 링크로 job_id 전달.
4. Streamlit 페이지는 FastAPI의 /ai/job/:job_id 혹은 /ai/results/:job_id(READ) 호출하여 결과를 받아 표시.
   - 인증: Authorization header 또는 임시 token
5. 사용자가 "대체 적용" 등 상호작용 실행 시 Streamlit은 FastAPI의 /ai/recommend-substitutes 또는 /api/recipes POST로 요청.

인증/보안 설계
--------------
- Streamlit은 외부에서 직접 접근 가능하므로 다음 중 하나 권장:
  1) Next.js에서 서명된 단기 토큰(query param) 전달 -> Streamlit에서 FastAPI에 재전달 시 동일 토큰 사용
  2) Streamlit을 VPC 내부 서비스로 배치하고 Next.js에서만 허용 (사설 네트워크)
- 민감 데이터 보호:
  - Streamlit은 사용자의 혈액검사 세부 수치 등 민감 정보를 노출하지 않고 요약/비식별화 정보만 노출
- CORS 및 CSRF 방지: FastAPI는 Streamlit origin에 대해 적절한 CORS 설정

성능 및 캐시
------------
- Streamlit은 read-only 시나리오(결과 시각화)에 최적화. heavy LLM 요청은 FastAPI에 위임.
- 캐시 전략:
  - job_id 결과는 MongoDB.cache_responses에 TTL로 저장 (권장 TTL: 7일)
  - Streamlit은 로컬 캐시(redis 또는 st.cache)로 단기간(5분) 응답 가속화
- 이미지 리사이징 및 CDN 제공 권장

UI/컴포넌트 상세 (Streamlit 구현 가이드)
----------------------------------------
- 라이브러리: streamlit>=1.XX, streamlit.components.v1, plotly, pandas, requests
- 주요 함수/위젯:
  - st.file_uploader -> 이미지 업로드(옵션)
  - st.image -> 이미지 표시
  - st.columns -> 레이아웃 그리드
  - st.table / st.dataframe -> 성분 테이블
  - st.metric -> 요약 카드
  - st.plotly_chart -> 차트
  - st.expander -> 설명 토글
  - st.button -> 대체 적용 / 재요청
  - st.session_state -> 페이지 상태 관리
- 예시 레이아웃 코드 스니펫 (요약):
```python
import streamlit as st
import requests

JOB_ID = st.experimental_get_query_params().get('job_id', [None])[0]
if not JOB_ID:
    st.error("job_id가 필요합니다.")
    st.stop()

# Fetch result
resp = requests.get(f"{FASTAPI_URL}/ai/job/{JOB_ID}", headers={'Authorization': f'Bearer {TOKEN}'})
data = resp.json()

st.title("콩닥 식탁 — AI 분석 리포트")
st.subheader(f"요리명: {data['detected_dish']}  |  Job: {JOB_ID}")
col1, col2 = st.columns([1,2])
with col1:
    st.image(data['image_url'], use_column_width=True)
    st.metric("칼륨 (mg)", data['totals']['k_mg'])
    st.metric("인 (mg)", data['totals']['p_mg'])
with col2:
    st.plotly_chart(... )  # nutrition charts
    st.dataframe(data['ingredients'])
```

상호작용 시나리오 예시
----------------------
1) 사용자는 Next.js에서 "분석 결과 보기" 클릭 → Streamlit open with job_id
2) Streamlit은 FastAPI에서 결과를 조회해 시각화
3) 사용자가 "대체재 적용" 클릭 -> Streamlit POST /ai/recommend-substitutes -> FastAPI returns alternatives -> Streamlit shows "시뮬레이션 결과" (새 totals)
4) 사용자가 "레시피 저장" 클릭 -> POST /api/recipes (Nest.js proxy or direct with JWT)

운영/배포 가이드
---------------
- 개발:
  - docker-compose.yml로 streamlit service 추가
  - 환경변수: FASTAPI_URL, TOKEN_VERIFY_ENDPOINT (Nest.js), CDN_BASE
- 프로덕션:
  - Streamlit app을 Docker 이미지로 빌드 (multi-stage), 배포는 ECS Fargate 또는 EC2 + nginx reverse-proxy
  - HTTPS: ALB/ELB에서 TLS 종료 권장
  - 인증: short-lived token 방식 권장 (Next.js가 서명, Streamlit이 검증)

모니터링 및 로깅
----------------
- 페이지 뷰/요청 로그: nginx access logs / application logs (JSON)
- 사용자 상호작용(퀴즈 응답 등)은 FastAPI 통해 MongoDB feedbacks로 기록
- 모니터링: CloudWatch/Grafana에서 latency, error rate, cache hit ratio 관찰

유효성/테스트 케이스
-------------------
1. 정상 flow: job_id로 접속 → 결과 로드 → 대체재 적용 → 저장 (200 OK)
2. 인증 실패: invalid token → 401
3. 누락 job_id: 에러 메시지
4. 대량 이미지(업로드) 시도: 파일사이즈 제한(10MB) 초과 시 413 처리
5. 캐시 만료: 캐시가 만료되면 FastAPI에서 재계산 또는 cached=false 표시

추후 개선 아이디어
-------------------
- Streamlit 내 간단한 편집기(재료 수량 드래그로 변경)로 실시간 시뮬레이션
- Embedding similarity 시각화 (TSNE 또는 UMAP)
- Streamlit-Next.js 간 세션 공유 (SSO) 개선

부록: 권장 환경
---------------
- Python 3.10+
- streamlit >= 1.20
- plotly, pandas, requests
- Docker image: python:3.10-slim + pip install -r requirements.txt

끝.
