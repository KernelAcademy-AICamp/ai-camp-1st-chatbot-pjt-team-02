{\rtf1\ansi\ansicpg949\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset129 AppleMyungjo;\f1\froman\fcharset0 Times-Bold;\f2\fnil\fcharset0 AppleColorEmoji;
\f3\froman\fcharset0 Times-Roman;\f4\fmodern\fcharset0 Courier;\f5\fnil\fcharset129 AppleSDGothicNeo-Regular;
\f6\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue233;\red109\green109\blue109;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c93333;\cssrgb\c50196\c50196\c50196;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww29340\viewh17280\viewkind0
\deftab720
\pard\pardeftab720\sa321\partightenfactor0

\f0\fs48 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'b5\'a5\'c0\'cc\'c5\'cd\'c0\'fc\'c3\'b3\'b8\'ae
\f1\b .md\
\pard\pardeftab720\sa298\partightenfactor0

\f2\b0\fs36 \cf0 \uc0\u55357 \u56522 
\f1\b  
\f0\b0 \'c4\'e1\'b4\'da
\f1\b  
\f0\b0 \'bd\'c4\'c5\'b9
\f1\b  - Vector DB 
\f0\b0 \'b1\'b8\'c3\'e0\'c0\'bb
\f1\b  
\f0\b0 \'c0\'a7\'c7\'d1
\f1\b  
\f0\b0 \'b5\'a5\'c0\'cc\'c5\'cd
\f1\b  
\f0\b0 \'c0\'fc\'c3\'b3\'b8\'ae
\f1\b  
\f0\b0 \'b0\'a1\'c0\'cc\'b5\'e5
\f1\b \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b0\fs28 \cf0 \'b8\'f1\'c2\'f7
\f1\b \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f3\b0\fs24 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}{\field{\*\fldinst{HYPERLINK "https://claude.ai/chat/0028bfe6-9b77-45ba-9cfd-8e55f3baf23d#1-%EA%B0%9C%EC%9A%94"}}{\fldrslt 
\f0 \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec3 \'b0\'b3\'bf\'e4}}\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}{\field{\*\fldinst{HYPERLINK "https://claude.ai/chat/0028bfe6-9b77-45ba-9cfd-8e55f3baf23d#2-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%88%98%EC%A7%91-%EA%B3%84%ED%9A%8D"}}{\fldrslt 
\f0 \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec3 \'b5\'a5\'c0\'cc\'c5\'cd
\f3  
\f0 \'bc\'f6\'c1\'fd
\f3  
\f0 \'b0\'e8\'c8\'b9}}\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}{\field{\*\fldinst{HYPERLINK "https://claude.ai/chat/0028bfe6-9b77-45ba-9cfd-8e55f3baf23d#3-%EC%A0%84%EC%B2%98%EB%A6%AC-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EC%84%A4%EA%B3%84"}}{\fldrslt 
\f0 \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec3 \'c0\'fc\'c3\'b3\'b8\'ae
\f3  
\f0 \'c6\'c4\'c0\'cc\'c7\'c1\'b6\'f3\'c0\'ce
\f3  
\f0 \'bc\'b3\'b0\'e8}}\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}{\field{\*\fldinst{HYPERLINK "https://claude.ai/chat/0028bfe6-9b77-45ba-9cfd-8e55f3baf23d#4-vector-db-%EA%B5%AC%EC%B6%95-%EC%A0%84%EB%9E%B5"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec3 Vector DB 
\f0 \'b1\'b8\'c3\'e0
\f3  
\f0 \'c0\'fc\'b7\'ab}}\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}{\field{\*\fldinst{HYPERLINK "https://claude.ai/chat/0028bfe6-9b77-45ba-9cfd-8e55f3baf23d#5-%EA%B5%AC%ED%98%84-%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C"}}{\fldrslt 
\f0 \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec3 \'b1\'b8\'c7\'f6
\f3  
\f0 \'c4\'da\'b5\'e5
\f3  
\f0 \'bf\'b9\'bd\'c3}}\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6	}{\field{\*\fldinst{HYPERLINK "https://claude.ai/chat/0028bfe6-9b77-45ba-9cfd-8e55f3baf23d#6-%EA%B2%80%EC%A6%9D-%EB%B0%8F-%ED%92%88%EC%A7%88-%EA%B4%80%EB%A6%AC"}}{\fldrslt 
\f0 \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec3 \'b0\'cb\'c1\'f5
\f3  
\f0 \'b9\'d7
\f3  
\f0 \'c7\'b0\'c1\'fa
\f3  
\f0 \'b0\'fc\'b8\'ae}}\cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf4 \strokec4 \
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 \strokec2 1. 
\f0\b0 \'b0\'b3\'bf\'e4
\f1\b \
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 1.1 
\f0\b0 \'b8\'f1\'c0\'fb
\f1\b \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f3\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 CKD 
\f0 \'c8\'af\'c0\'da
\f3  
\f0 \'b8\'c2\'c3\'e3
\f3  
\f0 \'bd\'c4\'b4\'dc
\f3  
\f0 \'ba\'d0\'bc\'ae\'c0\'bb
\f3  
\f0 \'c0\'a7\'c7\'d1
\f3  
\f0 \'c5\'eb\'c7\'d5
\f3  
\f0 \'bf\'b5\'be\'e7\'bc\'ba\'ba\'d0
\f3  
\f0 \'b5\'a5\'c0\'cc\'c5\'cd\'ba\'a3\'c0\'cc\'bd\'ba
\f3  
\f0 \'b1\'b8\'c3\'e0
\f3 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}
\f0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'b4\'d9\'be\'e7\'c7\'d1
\f3  
\f0 \'c3\'e2\'c3\'b3\'c0\'c7
\f3  
\f0 \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6
\f3  
\f0 \'c7\'a5\'c1\'d8\'c8\'ad\'c7\'cf\'bf\'a9
\f3  MongoDB Vector DB
\f0 \'bf\'a1
\f3  
\f0 \'c0\'d3\'ba\'a3\'b5\'f9
\f3  
\f0 \'c0\'fa\'c0\'e5
\f3 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 LLM RAG(Retrieval-Augmented Generation) 
\f0 \'bd\'c3\'bd\'ba\'c5\'db\'c0\'c7
\f3  
\f0 \'b1\'e2\'b9\'dd
\f3  
\f0 \'b5\'a5\'c0\'cc\'c5\'cd
\f3  
\f0 \'b1\'b8\'bc\'ba
\f3 \
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf0 1.2 
\f0\b0 \'c3\'d6\'c1\'be
\f1\b  
\f0\b0 \'b8\'f1\'c7\'a5
\f1\b \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}
\f0\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'b1\'b8\'c1\'b6\'c8\'ad
\f1\b  
\f0\b0 \'b5\'a5\'c0\'cc\'c5\'cd
\f3 : PostgreSQL
\f0 \'bf\'a1
\f3  
\f0 \'c1\'a4\'b1\'d4\'c8\'ad\'b5\'c8
\f3  
\f0 \'bf\'b5\'be\'e7\'bc\'ba\'ba\'d0
\f3  
\f0 \'c5\'d7\'c0\'cc\'ba\'ed
\f3 \
\ls3\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}
\f0\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'ba\'a4\'c5\'cd
\f1\b  
\f0\b0 \'b5\'a5\'c0\'cc\'c5\'cd
\f3 : MongoDB
\f0 \'bf\'a1
\f3  
\f0 \'c0\'d3\'ba\'a3\'b5\'f9\'b5\'c8
\f3  
\f0 \'bd\'c4\'c7\'b0
\f3 /
\f0 \'b7\'b9\'bd\'c3\'c7\'c7
\f3  
\f0 \'b0\'cb\'bb\'f6\'bf\'eb
\f3  
\f0 \'ba\'a4\'c5\'cd
\f3 \
\ls3\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}
\f0\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'c4\'b3\'bd\'c3
\f1\b  
\f0\b0 \'b5\'a5\'c0\'cc\'c5\'cd
\f3 : 
\f0 \'c0\'da\'c1\'d6
\f3  
\f0 \'b0\'cb\'bb\'f6\'b5\'c7\'b4\'c2
\f3  
\f0 \'c4\'f5\'b8\'ae
\f3  
\f0 \'b0\'e1\'b0\'fa
\f3  
\f0 \'c0\'fa\'c0\'e5
\f3 \
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 2. 
\f0\b0 \'b5\'a5\'c0\'cc\'c5\'cd
\f1\b  
\f0\b0 \'bc\'f6\'c1\'fd
\f1\b  
\f0\b0 \'b0\'e8\'c8\'b9
\f1\b \
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 2.1 
\f0\b0 \'b5\'a5\'c0\'cc\'c5\'cd
\f1\b  
\f0\b0 \'bc\'d2\'bd\'ba
\f1\b  
\f0\b0 \'b8\'c5\'c7\'ce
\f1\b \

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth985\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx1728
\clvertalc \clshdrawnil \clwWidth3097\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx3456
\clvertalc \clshdrawnil \clwWidth2122\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5184
\clvertalc \clshdrawnil \clwWidth1509\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx6912
\clvertalc \clshdrawnil \clwWidth2478\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0

\f0\b0\fs24 \cf0 \'bf\'ec\'bc\'b1\'bc\'f8\'c0\'a7
\f1\b \cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0

\f0\b0 \cf0 \'b5\'a5\'c0\'cc\'c5\'cd
\f1\b  
\f0\b0 \'bc\'d2\'bd\'ba
\f1\b \cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0

\f0\b0 \cf0 \'bc\'f6\'c1\'fd
\f1\b  
\f0\b0 \'b9\'e6\'b9\'fd
\f1\b \cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0

\f0\b0 \cf0 \'bf\'b9\'bb\'f3
\f1\b  
\f0\b0 \'b7\'b9\'c4\'da\'b5\'e5
\f1\b \cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0

\f0\b0 \cf0 \'c1\'d6\'bf\'e4
\f1\b  
\f0\b0 \'c7\'ca\'b5\'e5
\f1\b \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth985\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx1728
\clvertalc \clshdrawnil \clwWidth3097\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx3456
\clvertalc \clshdrawnil \clwWidth2122\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5184
\clvertalc \clshdrawnil \clwWidth1509\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx6912
\clvertalc \clshdrawnil \clwWidth2478\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3\b0 \cf0 1\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'b1\'b9\'b0\'a1\'c7\'a5\'c1\'d8\'bd\'c4\'c7\'b0\'bc\'ba\'ba\'d0\'c7\'a5
\f3  (
\f0 \'b3\'f3\'c1\'f8\'c3\'bb
\f3 )\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 Excel 
\f0 \'c6\'c4\'c0\'cf
\f3  
\f0 \'c6\'c4\'bd\'cc
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 ~5,000
\f0 \'b0\'b3
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'bd\'c4\'c7\'b0\'b8\'ed
\f3 , K, P, Na, 
\f0 \'b4\'dc\'b9\'e9\'c1\'fa
\f3 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth985\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx1728
\clvertalc \clshdrawnil \clwWidth3097\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx3456
\clvertalc \clshdrawnil \clwWidth2122\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5184
\clvertalc \clshdrawnil \clwWidth1509\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx6912
\clvertalc \clshdrawnil \clwWidth2478\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 2\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'bd\'c4\'be\'e0\'c3\'b3
\f3  
\f0 \'b0\'f8\'b0\'f8\'b5\'a5\'c0\'cc\'c5\'cd
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 REST API\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 ~10,000
\f0 \'b0\'b3
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'bd\'c4\'c7\'b0\'c4\'da\'b5\'e5
\f3 , 
\f0 \'bf\'b5\'be\'e7\'bc\'ba\'ba\'d0
\f3 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth985\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx1728
\clvertalc \clshdrawnil \clwWidth3097\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx3456
\clvertalc \clshdrawnil \clwWidth2122\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5184
\clvertalc \clshdrawnil \clwWidth1509\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx6912
\clvertalc \clshdrawnil \clwWidth2478\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 3\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'b4\'eb\'c7\'d1\'bd\'c5\'c0\'e5\'c7\'d0\'c8\'b8
\f3  PDF\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 PDF 
\f0 \'c5\'d8\'bd\'ba\'c6\'ae
\f3  
\f0 \'c3\'df\'c3\'e2
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 ~200
\f0 \'b0\'b3
\f3  
\f0 \'b7\'b9\'bd\'c3\'c7\'c7
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'c8\'af\'c0\'da\'bf\'eb
\f3  
\f0 \'b7\'b9\'bd\'c3\'c7\'c7
\f3 , 
\f0 \'c1\'b6\'b8\'ae\'b9\'fd
\f3 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth985\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx1728
\clvertalc \clshdrawnil \clwWidth3097\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx3456
\clvertalc \clshdrawnil \clwWidth2122\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5184
\clvertalc \clshdrawnil \clwWidth1509\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx6912
\clvertalc \clshdrawnil \clwWidth2478\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 4\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 AI Hub 
\f0 \'c0\'bd\'bd\'c4
\f3  
\f0 \'b5\'a5\'c0\'cc\'c5\'cd
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 JSON/CSV 
\f0 \'b4\'d9\'bf\'ee\'b7\'ce\'b5\'e5
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 ~100,000
\f0 \'b0\'b3
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'c0\'cc\'b9\'cc\'c1\'f6
\f3 -
\f0 \'b7\'b9\'bd\'c3\'c7\'c7
\f3  
\f0 \'b8\'c5\'c7\'ce
\f3 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth985\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx1728
\clvertalc \clshdrawnil \clwWidth3097\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx3456
\clvertalc \clshdrawnil \clwWidth2122\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5184
\clvertalc \clshdrawnil \clwWidth1509\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx6912
\clvertalc \clshdrawnil \clwWidth2478\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 5\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'bf\'b5\'be\'e7\'bb\'e7\'c7\'f9\'c8\'b8
\f3  
\f0 \'c0\'a5
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'c0\'a5
\f3  
\f0 \'bd\'ba\'c5\'a9\'b7\'a1\'c7\'ce
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 ~500
\f0 \'b0\'b3
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'c0\'fc\'b9\'ae
\f3  
\f0 \'bd\'c4\'b4\'dc
\f3  
\f0 \'c1\'a4\'ba\'b8
\f3 \cell \lastrow\row
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf0 2.2 
\f0\b0 \'bc\'f6\'c1\'fd
\f1\b  
\f0\b0 \'c0\'fc\'b7\'ab
\f1\b \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 # 
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'bc\'f6\'c1\'fd
\f4  
\f5 \'bf\'ec\'bc\'b1\'bc\'f8\'c0\'a7
\f4  
\f5 \'b9\'d7
\f4  
\f5 \'c0\'fc\'b7\'ab
\f4 \
COLLECTION_STRATEGY = \{\
    "phase1": \{\
        "duration": "1
\f5 \'c1\'d6
\f4 ",\
        "sources": ["
\f5 \'b1\'b9\'b0\'a1\'c7\'a5\'c1\'d8\'bd\'c4\'c7\'b0\'bc\'ba\'ba\'d0\'c7\'a5
\f4 ", "
\f5 \'bd\'c4\'be\'e0\'c3\'b3
\f4  API"],\
        "goal": "
\f5 \'c7\'d9\'bd\'c9
\f4  
\f5 \'bf\'b5\'be\'e7\'bc\'ba\'ba\'d0
\f4  DB 
\f5 \'b1\'b8\'c3\'e0
\f4 "\
    \},\
    "phase2": \{\
        "duration": "1
\f5 \'c1\'d6
\f4 ",\
        "sources": ["
\f5 \'bd\'c5\'c0\'e5\'c7\'d0\'c8\'b8
\f4  PDF", "AI Hub"],\
        "goal": "
\f5 \'b7\'b9\'bd\'c3\'c7\'c7
\f4  
\f5 \'b9\'d7
\f4  
\f5 \'c0\'cc\'b9\'cc\'c1\'f6
\f4  
\f5 \'b8\'c5\'c7\'ce
\f4 "\
    \},\
    "phase3": \{\
        "duration": "3
\f5 \'c0\'cf
\f4 ",\
        "sources": ["
\f5 \'bf\'b5\'be\'e7\'bb\'e7\'c7\'f9\'c8\'b8
\f4 ", "
\f5 \'c3\'df\'b0\'a1
\f4  
\f5 \'b0\'cb\'c1\'f5
\f4  
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4 "],\
        "goal": "
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'ba\'b8\'bf\'cf
\f4  
\f5 \'b9\'d7
\f4  
\f5 \'b0\'cb\'c1\'f5
\f4 "\
    \}\
\}\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 3. 
\f0\b0 \'c0\'fc\'c3\'b3\'b8\'ae
\f1\b  
\f0\b0 \'c6\'c4\'c0\'cc\'c7\'c1\'b6\'f3\'c0\'ce
\f1\b  
\f0\b0 \'bc\'b3\'b0\'e8
\f1\b \
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 3.1 
\f0\b0 \'c6\'c4\'c0\'cc\'c7\'c1\'b6\'f3\'c0\'ce
\f1\b  
\f0\b0 \'be\'c6\'c5\'b0\'c5\'d8\'c3\'b3
\f1\b \
\pard\pardeftab720\partightenfactor0

\f5\b0\fs26 \cf0 \'bf\'f8\'bd\'c3
\f4  
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f6 \uc0\u8594 
\f4  
\f5 \'bc\'f6\'c1\'fd\'b1\'e2
\f4  
\f6 \uc0\u8594 
\f4  
\f5 \'c1\'a4\'c1\'a6\'b1\'e2
\f4  
\f6 \uc0\u8594 
\f4  
\f5 \'c7\'a5\'c1\'d8\'c8\'ad\'b1\'e2
\f4  
\f6 \uc0\u8594 
\f4  
\f5 \'c0\'d3\'ba\'a3\'b5\'f9
\f4  
\f5 \'bb\'fd\'bc\'ba\'b1\'e2
\f4  
\f6 \uc0\u8594 
\f4  DB 
\f5 \'c0\'fa\'c0\'e5
\f4 \
     
\f6 \uc0\u8595 
\f4           
\f6 \uc0\u8595 
\f4          
\f6 \uc0\u8595 
\f4           
\f6 \uc0\u8595 
\f4             
\f6 \uc0\u8595 
\f4             
\f6 \uc0\u8595 
\f4 \
   [Raw]    [Parsed]  [Cleaned]  [Normalized]  [Vectorized]  [Stored]\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf0 3.2 
\f0\b0 \'b4\'dc\'b0\'e8\'ba\'b0
\f1\b  
\f0\b0 \'c3\'b3\'b8\'ae
\f1\b  
\f0\b0 \'b3\'bb\'bf\'eb
\f1\b \
\pard\pardeftab720\sa319\partightenfactor0

\fs24 \cf0 Stage 1: 
\f0\b0 \'b5\'a5\'c0\'cc\'c5\'cd
\f1\b  
\f0\b0 \'bc\'f6\'c1\'fd
\f1\b  (Collection)\
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 class DataCollector:\
    """
\f5 \'b4\'d9\'be\'e7\'c7\'d1
\f4  
\f5 \'bc\'d2\'bd\'ba\'bf\'a1\'bc\'ad
\f4  
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'bc\'f6\'c1\'fd
\f4 """\
    \
    def collect_excel(self, file_path):\
        """Excel 
\f5 \'c6\'c4\'c0\'cf
\f4  
\f5 \'c3\'b3\'b8\'ae
\f4  (
\f5 \'b1\'b9\'b0\'a1\'c7\'a5\'c1\'d8\'bd\'c4\'c7\'b0\'bc\'ba\'ba\'d0\'c7\'a5
\f4 )"""\
        # pandas
\f5 \'b7\'ce
\f4  
\f5 \'c0\'d0\'b1\'e2
\f4 \
        # 
\f5 \'bd\'c3\'c6\'ae\'ba\'b0
\f4  
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'c3\'df\'c3\'e2
\f4 \
        # 
\f5 \'c7\'ec\'b4\'f5
\f4  
\f5 \'b8\'c5\'c7\'ce
\f4 \
        \
    def collect_api(self, api_endpoint):\
        """REST API 
\f5 \'c8\'a3\'c3\'e2
\f4  (
\f5 \'bd\'c4\'be\'e0\'c3\'b3
\f4 )"""\
        # 
\f5 \'c6\'e4\'c0\'cc\'c1\'f6\'b3\'d7\'c0\'cc\'bc\'c7
\f4  
\f5 \'c3\'b3\'b8\'ae
\f4 \
        # Rate limiting\
        # 
\f5 \'bf\'a1\'b7\'af
\f4  
\f5 \'c7\'da\'b5\'e9\'b8\'b5
\f4 \
        \
    def collect_pdf(self, pdf_path):\
        """PDF 
\f5 \'c5\'d8\'bd\'ba\'c6\'ae
\f4  
\f5 \'c3\'df\'c3\'e2
\f4  (
\f5 \'bd\'c5\'c0\'e5\'c7\'d0\'c8\'b8
\f4 )"""\
        # PyPDF2 
\f5 \'b6\'c7\'b4\'c2
\f4  pdfplumber 
\f5 \'bb\'e7\'bf\'eb
\f4 \
        # 
\f5 \'c7\'a5
\f4  
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'c3\'df\'c3\'e2
\f4 \
        # 
\f5 \'b7\'b9\'bd\'c3\'c7\'c7
\f4  
\f5 \'c5\'d8\'bd\'ba\'c6\'ae
\f4  
\f5 \'c6\'c4\'bd\'cc
\f4 \
\pard\pardeftab720\sa319\partightenfactor0

\f1\b\fs24 \cf0 Stage 2: 
\f0\b0 \'b5\'a5\'c0\'cc\'c5\'cd
\f1\b  
\f0\b0 \'c1\'a4\'c1\'a6
\f1\b  (Cleaning)\
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 class DataCleaner:\
    """
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'c1\'a4\'c1\'a6
\f4  
\f5 \'b9\'d7
\f4  
\f5 \'c0\'cc\'bb\'f3\'c4\'a1
\f4  
\f5 \'c3\'b3\'b8\'ae
\f4 """\
    \
    def clean_food_names(self, df):\
        """
\f5 \'bd\'c4\'c7\'b0\'b8\'ed
\f4  
\f5 \'c1\'a4\'c1\'a6
\f4 """\
        # 
\f5 \'c6\'af\'bc\'f6\'b9\'ae\'c0\'da
\f4  
\f5 \'c1\'a6\'b0\'c5
\f4 \
        # 
\f5 \'b0\'fd\'c8\'a3
\f4  
\f5 \'b3\'bb\'bf\'eb
\f4  
\f5 \'c3\'b3\'b8\'ae
\f4 \
        # 
\f5 \'b0\'f8\'b9\'e9
\f4  
\f5 \'c1\'a4\'b1\'d4\'c8\'ad
\f4 \
        # 
\f5 \'bf\'b9
\f4 : "
\f5 \'c7\'c7\'b8\'c1
\f4 (
\f5 \'bb\'a1\'b0\'ad
\f4 )" 
\f6 \uc0\u8594 
\f4  "
\f5 \'c7\'c7\'b8\'c1
\f4 "\
        \
    def remove_duplicates(self, df):\
        """
\f5 \'c1\'df\'ba\'b9
\f4  
\f5 \'c1\'a6\'b0\'c5
\f4 """\
        # 
\f5 \'bd\'c4\'c7\'b0\'b8\'ed
\f4  + 
\f5 \'c3\'e2\'c3\'b3
\f4  
\f5 \'b1\'e2\'c1\'d8
\f4  
\f5 \'c1\'df\'ba\'b9
\f4  
\f5 \'c3\'bc\'c5\'a9
\f4 \
        # 
\f5 \'bf\'ec\'bc\'b1\'bc\'f8\'c0\'a7\'bf\'a1
\f4  
\f5 \'b5\'fb\'b8\'a5
\f4  
\f5 \'bc\'b1\'c5\'c3
\f4 \
        \
    def handle_outliers(self, df):\
        """
\f5 \'c0\'cc\'bb\'f3\'c4\'a1
\f4  
\f5 \'c3\'b3\'b8\'ae
\f4 """\
        # IQR 
\f5 \'b9\'e6\'b9\'fd\'c0\'b8\'b7\'ce
\f4  
\f5 \'bf\'b5\'be\'e7\'bc\'ba\'ba\'d0
\f4  
\f5 \'c0\'cc\'bb\'f3\'c4\'a1
\f4  
\f5 \'c5\'bd\'c1\'f6
\f4 \
        # 
\f5 \'b7\'ce\'b1\'d7
\f4  
\f5 \'ba\'af\'c8\'af
\f4  
\f5 \'b6\'c7\'b4\'c2
\f4  
\f5 \'c4\'b8\'c7\'ce
\f4 \
\pard\pardeftab720\sa319\partightenfactor0

\f1\b\fs24 \cf0 Stage 3: 
\f0\b0 \'b5\'a5\'c0\'cc\'c5\'cd
\f1\b  
\f0\b0 \'c7\'a5\'c1\'d8\'c8\'ad
\f1\b  (Standardization)\
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 class DataStandardizer:\
    """
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'c7\'a5\'c1\'d8\'c8\'ad
\f4  
\f5 \'b9\'d7
\f4  
\f5 \'c1\'a4\'b1\'d4\'c8\'ad
\f4 """\
    \
    # 
\f5 \'b4\'dc\'c0\'a7
\f4  
\f5 \'ba\'af\'c8\'af
\f4  
\f5 \'c5\'d7\'c0\'cc\'ba\'ed
\f4 \
    UNIT_CONVERSIONS = \{\
        '1
\f5 \'c4\'c5
\f4 ': 200,      # g\
        '1
\f5 \'c5\'ab\'bc\'fa
\f4 ': 15,     # g\
        '1
\f5 \'c0\'db\'c0\'ba\'bc\'fa
\f4 ': 5,    # g\
        '1
\f5 \'b0\'b3
\f4 (
\f5 \'bc\'d2
\f4 )': 50,   # g (
\f5 \'c6\'f2\'b1\'d5
\f4 )\
        '1
\f5 \'b0\'b3
\f4 (
\f5 \'c1\'df
\f4 )': 100,  # g (
\f5 \'c6\'f2\'b1\'d5
\f4 )\
        '1
\f5 \'b0\'b3
\f4 (
\f5 \'b4\'eb
\f4 )': 150,  # g (
\f5 \'c6\'f2\'b1\'d5
\f4 )\
    \}\
    \
    # 
\f5 \'c0\'af\'bb\'e7\'be\'ee
\f4  
\f5 \'b8\'c5\'c7\'ce
\f4 \
    SYNONYM_MAPPING = \{\
        '
\f5 \'c7\'c7\'b8\'c1
\f4 ': ['
\f5 \'c6\'c4\'c7\'c1\'b8\'ae\'c4\'ab
\f4 ', '
\f5 \'b4\'dc\'b0\'ed\'c3\'df
\f4 ', 'bell pepper'],\
        '
\f5 \'b0\'a8\'c0\'da
\f4 ': ['
\f5 \'c6\'f7\'c5\'d7\'c0\'cc\'c5\'e4
\f4 ', '
\f5 \'be\'cb\'b0\'a8\'c0\'da
\f4 ', 'potato'],\
        '
\f5 \'b4\'e7\'b1\'d9
\f4 ': ['
\f5 \'c8\'ab\'b4\'e7\'b9\'ab
\f4 ', 'carrot'],\
        '
\f5 \'b9\'e8\'c3\'df
\f4 ': ['
\f5 \'c5\'eb\'b9\'e8\'c3\'df
\f4 ', '
\f5 \'b1\'e8\'c0\'e5\'b9\'e8\'c3\'df
\f4 '],\
    \}\
    \
    def standardize_units(self, amount_str):\
        """
\f5 \'b4\'dc\'c0\'a7
\f4  
\f5 \'c7\'a5\'c1\'d8\'c8\'ad
\f4  (
\f5 \'b8\'f0\'b5\'ce
\f4  g
\f5 \'c0\'b8\'b7\'ce
\f4  
\f5 \'ba\'af\'c8\'af
\f4 )"""\
        # 
\f5 \'c1\'a4\'b1\'d4\'c7\'a5\'c7\'f6\'bd\'c4\'c0\'b8\'b7\'ce
\f4  
\f5 \'bc\'fd\'c0\'da\'bf\'cd
\f4  
\f5 \'b4\'dc\'c0\'a7
\f4  
\f5 \'ba\'d0\'b8\'ae
\f4 \
        # 
\f5 \'ba\'af\'c8\'af
\f4  
\f5 \'c5\'d7\'c0\'cc\'ba\'ed
\f4  
\f5 \'c0\'fb\'bf\'eb
\f4 \
        # 
\f5 \'b0\'e1\'c3\'f8\'c4\'a1\'b4\'c2
\f4  
\f5 \'c6\'f2\'b1\'d5\'b0\'aa\'c0\'b8\'b7\'ce
\f4  
\f5 \'b4\'eb\'c3\'bc
\f4 \
        \
    def map_synonyms(self, food_name):\
        """
\f5 \'c0\'af\'bb\'e7\'be\'ee
\f4  
\f5 \'c5\'eb\'c7\'d5
\f4 """\
        # 
\f5 \'b8\'de\'c0\'ce
\f4  
\f5 \'c0\'cc\'b8\'a7\'c0\'b8\'b7\'ce
\f4  
\f5 \'b8\'c5\'c7\'ce
\f4 \
        # 
\f5 \'ba\'b0\'c4\'aa\'c0\'ba
\f4  aliases 
\f5 \'c7\'ca\'b5\'e5\'bf\'a1
\f4  
\f5 \'c0\'fa\'c0\'e5
\f4 \
\pard\pardeftab720\sa319\partightenfactor0

\f1\b\fs24 \cf0 Stage 4: 
\f0\b0 \'b0\'e1\'c3\'f8\'c4\'a1
\f1\b  
\f0\b0 \'c3\'b3\'b8\'ae
\f1\b  (Missing Value Imputation)\
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 class MissingValueHandler:\
    """
\f5 \'b0\'e1\'c3\'f8\'c4\'a1
\f4  
\f5 \'ba\'b8\'b0\'a3
\f4  
\f5 \'c0\'fc\'b7\'ab
\f4 """\
    \
    def impute_nutrients(self, df):\
        """
\f5 \'bf\'b5\'be\'e7\'bc\'ba\'ba\'d0
\f4  
\f5 \'b0\'e1\'c3\'f8\'c4\'a1
\f4  
\f5 \'c3\'b3\'b8\'ae
\f4 """\
        strategies = \{\
            'potassium': 'category_mean',  # 
\f5 \'b0\'b0\'c0\'ba
\f4  
\f5 \'bd\'c4\'c7\'b0\'b1\'ba
\f4  
\f5 \'c6\'f2\'b1\'d5
\f4 \
            'phosphorus': 'category_mean',\
            'sodium': 'similar_food',      # 
\f5 \'c0\'af\'bb\'e7
\f4  
\f5 \'bd\'c4\'c7\'b0
\f4  
\f5 \'c2\'fc\'c1\'b6
\f4 \
            'protein': 'regression',        # 
\f5 \'c8\'b8\'b1\'cd
\f4  
\f5 \'bf\'b9\'c3\'f8
\f4 \
            'calories': 'formula'           # 4-4-9 
\f5 \'b0\'f8\'bd\'c4
\f4 \
        \}\
        \
    def find_similar_foods(self, food_name, category):\
        """
\f5 \'c0\'af\'bb\'e7
\f4  
\f5 \'bd\'c4\'c7\'b0
\f4  
\f5 \'c3\'a3\'b1\'e2
\f4 """\
        # 
\f5 \'c4\'ab\'c5\'d7\'b0\'ed\'b8\'ae
\f4  
\f5 \'b3\'bb
\f4  
\f5 \'b0\'cb\'bb\'f6
\f4 \
        # 
\f5 \'c5\'d8\'bd\'ba\'c6\'ae
\f4  
\f5 \'c0\'af\'bb\'e7\'b5\'b5
\f4  
\f5 \'b0\'e8\'bb\'ea
\f4 \
        # 
\f5 \'bf\'b5\'be\'e7
\f4  
\f5 \'c7\'c1\'b7\'ce\'c7\'ca
\f4  
\f5 \'c0\'af\'bb\'e7\'b5\'b5
\f4 \
\pard\pardeftab720\sa319\partightenfactor0

\f1\b\fs24 \cf0 Stage 5: 
\f0\b0 \'c0\'d3\'ba\'a3\'b5\'f9
\f1\b  
\f0\b0 \'bb\'fd\'bc\'ba
\f1\b  (Embedding Generation)\
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 class EmbeddingGenerator:\
    """
\f5 \'c5\'d8\'bd\'ba\'c6\'ae
\f4  
\f5 \'c0\'d3\'ba\'a3\'b5\'f9
\f4  
\f5 \'bb\'fd\'bc\'ba
\f4 """\
    \
    def __init__(self):\
        # Sentence Transformers 
\f5 \'b8\'f0\'b5\'a8
\f4  
\f5 \'b7\'ce\'b5\'e5
\f4 \
        from sentence_transformers import SentenceTransformer\
        self.model = SentenceTransformer('jhgan/ko-sroberta-multitask')\
        \
    def generate_food_embedding(self, food_item):\
        """
\f5 \'bd\'c4\'c7\'b0
\f4  
\f5 \'c0\'d3\'ba\'a3\'b5\'f9
\f4  
\f5 \'bb\'fd\'bc\'ba
\f4 """\
        # 
\f5 \'c5\'d8\'bd\'ba\'c6\'ae
\f4  
\f5 \'b1\'b8\'bc\'ba
\f4 : 
\f5 \'c0\'cc\'b8\'a7
\f4  + 
\f5 \'c4\'ab\'c5\'d7\'b0\'ed\'b8\'ae
\f4  + 
\f5 \'bf\'b5\'be\'e7\'c1\'a4\'ba\'b8
\f4 \
        text = f"\{food_item['name']\} \{food_item['category']\} "\
        text += f"
\f5 \'c4\'ae\'b7\'fd
\f4  \{food_item['k_mg']\}mg 
\f5 \'c0\'ce
\f4  \{food_item['p_mg']\}mg"\
        \
        embedding = self.model.encode(text)\
        return embedding.tolist()\
        \
    def generate_recipe_embedding(self, recipe):\
        """
\f5 \'b7\'b9\'bd\'c3\'c7\'c7
\f4  
\f5 \'c0\'d3\'ba\'a3\'b5\'f9
\f4  
\f5 \'bb\'fd\'bc\'ba
\f4 """\
        # 
\f5 \'c1\'a6\'b8\'f1
\f4  + 
\f5 \'c0\'e7\'b7\'e1
\f4  + 
\f5 \'c1\'b6\'b8\'ae\'b9\'fd
\f4  
\f5 \'b0\'e1\'c7\'d5
\f4 \
        text = f"\{recipe['title']\} \{recipe['ingredients']\} \{recipe['method']\}"\
        return self.model.encode(text).tolist()\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 4. Vector DB 
\f0\b0 \'b1\'b8\'c3\'e0
\f1\b  
\f0\b0 \'c0\'fc\'b7\'ab
\f1\b \
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 4.1 MongoDB 
\f0\b0 \'bd\'ba\'c5\'b0\'b8\'b6
\f1\b  
\f0\b0 \'bc\'b3\'b0\'e8
\f1\b \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 // foods_embeddings 
\f5 \'c4\'c3\'b7\'ba\'bc\'c7
\f4 \
\{\
  "_id": ObjectId,\
  "food_id": "UUID",\
  "food_name": "
\f5 \'c7\'c7\'b8\'c1
\f4 ",\
  "food_name_en": "bell pepper",\
  "aliases": ["
\f5 \'c6\'c4\'c7\'c1\'b8\'ae\'c4\'ab
\f4 ", "
\f5 \'b4\'dc\'b0\'ed\'c3\'df
\f4 "],\
  "category": "
\f5 \'c3\'a4\'bc\'d2\'b7\'f9
\f4 ",\
  "subcategory": "
\f5 \'b0\'fa\'c3\'a4\'b7\'f9
\f4 ",\
  \
  // 
\f5 \'bf\'b5\'be\'e7\'bc\'ba\'ba\'d0
\f4  (per 100g)\
  "nutrition": \{\
    "potassium_mg": 218,\
    "phosphorus_mg": 24,\
    "sodium_mg": 2,\
    "protein_g": 0.9,\
    "calories_kcal": 20,\
    "carbohydrate_g": 4.6,\
    "fat_g": 0.2\
  \},\
  \
  // 
\f5 \'ba\'a4\'c5\'cd
\f4  
\f5 \'c0\'d3\'ba\'a3\'b5\'f9
\f4 \
  "embedding": [0.123, -0.456, ...],  // 768
\f5 \'c2\'f7\'bf\'f8
\f4 \
  "embedding_model": "ko-sroberta-multitask",\
  \
  // 
\f5 \'b8\'de\'c5\'b8\'b5\'a5\'c0\'cc\'c5\'cd
\f4 \
  "metadata": \{\
    "source": "
\f5 \'b1\'b9\'b0\'a1\'c7\'a5\'c1\'d8\'bd\'c4\'c7\'b0\'bc\'ba\'ba\'d0\'c7\'a5
\f4 ",\
    "source_id": "KFCT_001234",\
    "last_updated": ISODate("2024-04-26"),\
    "confidence": 0.95,\
    "ckd_safety": "caution"  // safe/caution/danger\
  \},\
  \
  // 
\f5 \'b0\'cb\'bb\'f6
\f4  
\f5 \'c3\'d6\'c0\'fb\'c8\'ad
\f4 \
  "search_tags": ["
\f5 \'c0\'fa\'c4\'ae\'b7\'fd
\f4 ", "
\f5 \'c3\'a4\'bc\'d2
\f4 ", "
\f5 \'ba\'f1\'c5\'b8\'b9\'ce
\f4 C"],\
  "created_at": ISODate()\
\}\
\
// recipes_embeddings 
\f5 \'c4\'c3\'b7\'ba\'bc\'c7
\f4 \
\{\
  "_id": ObjectId,\
  "recipe_id": "UUID",\
  "title": "
\f5 \'c0\'fa\'c4\'ae\'b7\'fd
\f4  
\f5 \'c7\'c7\'b8\'c1\'ba\'ba\'c0\'bd
\f4 ",\
  "description": "CKD 
\f5 \'c8\'af\'c0\'da\'bf\'eb
\f4  
\f5 \'c6\'af\'ba\'b0
\f4  
\f5 \'b7\'b9\'bd\'c3\'c7\'c7
\f4 ",\
  \
  // 
\f5 \'c0\'e7\'b7\'e1
\f4  
\f5 \'c1\'a4\'ba\'b8
\f4  (
\f5 \'c1\'a4\'b1\'d4\'c8\'ad\'b5\'c8
\f4  
\f5 \'c7\'fc\'c5\'c2
\f4 )\
  "ingredients": [\
    \{\
      "food_id": "UUID",\
      "name": "
\f5 \'c7\'c7\'b8\'c1
\f4 ",\
      "amount_g": 100,\
      "prep_method": "
\f5 \'b9\'b0\'bf\'a1
\f4  2
\f5 \'bd\'c3\'b0\'a3
\f4  
\f5 \'b4\'e3\'b1\'d7\'b1\'e2
\f4 "\
    \}\
  ],\
  \
  // 
\f5 \'c1\'b6\'b8\'ae\'b9\'fd
\f4  
\f5 \'c0\'d3\'ba\'a3\'b5\'f9
\f4 \
  "recipe_embedding": [...],\
  "ingredients_embedding": [...],\
  \
  // 
\f5 \'bf\'b5\'be\'e7
\f4  
\f5 \'c3\'d1\'c7\'d5
\f4  (1
\f5 \'c0\'ce\'ba\'d0
\f4 )\
  "nutrition_per_serving": \{\
    "potassium_mg": 150,\
    "phosphorus_mg": 20,\
    "sodium_mg": 300\
  \},\
  \
  // CKD 
\f5 \'b0\'fc\'b7\'c3
\f4  
\f5 \'b8\'de\'c5\'b8
\f4 \
  "ckd_metadata": \{\
    "safety_score": 0.85,\
    "dialysis_friendly": true,\
    "stage_3_5_suitable": true\
  \}\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf0 4.2 
\f0\b0 \'c0\'ce\'b5\'a6\'bd\'ba
\f1\b  
\f0\b0 \'c0\'fc\'b7\'ab
\f1\b \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 // 
\f5 \'c5\'d8\'bd\'ba\'c6\'ae
\f4  
\f5 \'b0\'cb\'bb\'f6
\f4  
\f5 \'c0\'ce\'b5\'a6\'bd\'ba
\f4 \
db.foods_embeddings.createIndex(\{ "food_name": "text", "aliases": "text" \})\
\
// 
\f5 \'bf\'b5\'be\'e7\'bc\'ba\'ba\'d0
\f4  
\f5 \'b9\'fc\'c0\'a7
\f4  
\f5 \'b0\'cb\'bb\'f6
\f4 \
db.foods_embeddings.createIndex(\{ "nutrition.potassium_mg": 1 \})\
db.foods_embeddings.createIndex(\{ "nutrition.phosphorus_mg": 1 \})\
\
// 
\f5 \'ba\'a4\'c5\'cd
\f4  
\f5 \'b0\'cb\'bb\'f6
\f4  (MongoDB Atlas Vector Search)\
\{\
  "mappings": \{\
    "fields": \{\
      "embedding": \{\
        "type": "knnVector",\
        "dimensions": 768,\
        "similarity": "cosine"\
      \}\
    \}\
  \}\
\}\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 5. 
\f0\b0 \'b1\'b8\'c7\'f6
\f1\b  
\f0\b0 \'c4\'da\'b5\'e5
\f1\b  
\f0\b0 \'bf\'b9\'bd\'c3
\f1\b \
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 5.1 
\f0\b0 \'b8\'de\'c0\'ce
\f1\b  
\f0\b0 \'c6\'c4\'c0\'cc\'c7\'c1\'b6\'f3\'c0\'ce
\f1\b \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 # main_pipeline.py\
import pandas as pd\
import numpy as np\
from pathlib import Path\
import asyncio\
from typing import List, Dict\
import logging\
\
class NutritionDataPipeline:\
    """
\f5 \'bf\'b5\'be\'e7
\f4  
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'c0\'fc\'c3\'b3\'b8\'ae
\f4  
\f5 \'b8\'de\'c0\'ce
\f4  
\f5 \'c6\'c4\'c0\'cc\'c7\'c1\'b6\'f3\'c0\'ce
\f4 """\
    \
    def __init__(self, config_path: str):\
        self.config = self.load_config(config_path)\
        self.setup_logging()\
        self.init_components()\
        \
    def init_components(self):\
        """
\f5 \'c4\'c4\'c6\'f7\'b3\'cd\'c6\'ae
\f4  
\f5 \'c3\'ca\'b1\'e2\'c8\'ad
\f4 """\
        self.collector = DataCollector(self.config)\
        self.cleaner = DataCleaner()\
        self.standardizer = DataStandardizer()\
        self.embedder = EmbeddingGenerator()\
        self.db_manager = DatabaseManager(self.config)\
        \
    async def run_pipeline(self):\
        """
\f5 \'c0\'fc\'c3\'bc
\f4  
\f5 \'c6\'c4\'c0\'cc\'c7\'c1\'b6\'f3\'c0\'ce
\f4  
\f5 \'bd\'c7\'c7\'e0
\f4 """\
        try:\
            # 1. 
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'bc\'f6\'c1\'fd
\f4 \
            logging.info("Starting data collection...")\
            raw_data = await self.collect_all_sources()\
            \
            # 2. 
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'c1\'a4\'c1\'a6
\f4 \
            logging.info("Cleaning data...")\
            cleaned_data = self.clean_data(raw_data)\
            \
            # 3. 
\f5 \'c7\'a5\'c1\'d8\'c8\'ad
\f4 \
            logging.info("Standardizing data...")\
            standardized_data = self.standardize_data(cleaned_data)\
            \
            # 4. 
\f5 \'c0\'d3\'ba\'a3\'b5\'f9
\f4  
\f5 \'bb\'fd\'bc\'ba
\f4 \
            logging.info("Generating embeddings...")\
            embedded_data = await self.generate_embeddings(standardized_data)\
            \
            # 5. DB 
\f5 \'c0\'fa\'c0\'e5
\f4 \
            logging.info("Storing in databases...")\
            await self.store_data(embedded_data)\
            \
            # 6. 
\f5 \'b0\'cb\'c1\'f5
\f4 \
            logging.info("Validating data...")\
            validation_results = await self.validate_data()\
            \
            return validation_results\
            \
        except Exception as e:\
            logging.error(f"Pipeline failed: \{e\}")\
            raise\
    \
    async def collect_all_sources(self) -> Dict:\
        """
\f5 \'b8\'f0\'b5\'e7
\f4  
\f5 \'bc\'d2\'bd\'ba\'bf\'a1\'bc\'ad
\f4  
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'bc\'f6\'c1\'fd
\f4 """\
        tasks = [\
            self.collect_excel_data(),\
            self.collect_api_data(),\
            self.collect_pdf_data()\
        ]\
        results = await asyncio.gather(*tasks)\
        return self.merge_collected_data(results)\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf0 5.2 Excel 
\f0\b0 \'b5\'a5\'c0\'cc\'c5\'cd
\f1\b  
\f0\b0 \'c3\'b3\'b8\'ae
\f1\b  (
\f0\b0 \'b1\'b9\'b0\'a1\'c7\'a5\'c1\'d8\'bd\'c4\'c7\'b0\'bc\'ba\'ba\'d0\'c7\'a5
\f1\b )\
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 # excel_processor.py\
import pandas as pd\
import numpy as np\
\
class ExcelProcessor:\
    """Excel 
\f5 \'c6\'c4\'c0\'cf
\f4  
\f5 \'c0\'fc\'c3\'b3\'b8\'ae
\f4 """\
    \
    def process_national_food_table(self, file_path: str) -> pd.DataFrame:\
        """
\f5 \'b1\'b9\'b0\'a1\'c7\'a5\'c1\'d8\'bd\'c4\'c7\'b0\'bc\'ba\'ba\'d0\'c7\'a5
\f4  
\f5 \'c3\'b3\'b8\'ae
\f4 """\
        \
        # Excel 
\f5 \'c6\'c4\'c0\'cf
\f4  
\f5 \'c0\'d0\'b1\'e2
\f4 \
        excel = pd.ExcelFile(file_path)\
        \
        # 
\f5 \'c7\'ca\'bf\'e4\'c7\'d1
\f4  
\f5 \'bd\'c3\'c6\'ae
\f4  
\f5 \'bc\'b1\'c5\'c3
\f4 \
        main_sheet = excel.parse('
\f5 \'bd\'c4\'c7\'b0\'bc\'ba\'ba\'d0
\f4 ')\
        \
        # 
\f5 \'c4\'c3\'b7\'b3
\f4  
\f5 \'b8\'c5\'c7\'ce
\f4 \
        column_mapping = \{\
            '
\f5 \'bd\'c4\'c7\'b0\'b8\'ed
\f4 ': 'food_name',\
            '
\f5 \'bd\'c4\'c7\'b0\'b4\'eb\'ba\'d0\'b7\'f9
\f4 ': 'category',\
            '
\f5 \'bd\'c4\'c7\'b0\'c1\'df\'ba\'d0\'b7\'f9
\f4 ': 'subcategory',\
            '
\f5 \'c4\'ae\'b7\'fd
\f4 (
\f5 \'a7\'b7
\f4 )': 'potassium_mg',\
            '
\f5 \'c0\'ce
\f4 (
\f5 \'a7\'b7
\f4 )': 'phosphorus_mg',\
            '
\f5 \'b3\'aa\'c6\'ae\'b7\'fd
\f4 (
\f5 \'a7\'b7
\f4 )': 'sodium_mg',\
            '
\f5 \'b4\'dc\'b9\'e9\'c1\'fa
\f4 (g)': 'protein_g',\
            '
\f5 \'bf\'a1\'b3\'ca\'c1\'f6
\f4 (
\f5 \'a7\'bb
\f4 )': 'calories_kcal'\
        \}\
        \
        df = main_sheet.rename(columns=column_mapping)\
        \
        # 
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'c5\'b8\'c0\'d4
\f4  
\f5 \'ba\'af\'c8\'af
\f4 \
        numeric_columns = ['potassium_mg', 'phosphorus_mg', 'sodium_mg', \
                          'protein_g', 'calories_kcal']\
        \
        for col in numeric_columns:\
            df[col] = pd.to_numeric(df[col], errors='coerce')\
        \
        # 100g 
\f5 \'b1\'e2\'c1\'d8\'c0\'b8\'b7\'ce
\f4  
\f5 \'c1\'a4\'b1\'d4\'c8\'ad
\f4 \
        df = self.normalize_to_100g(df)\
        \
        # 
\f5 \'b0\'e1\'c3\'f8\'c4\'a1
\f4  
\f5 \'c3\'b3\'b8\'ae
\f4 \
        df = self.handle_missing_values(df)\
        \
        return df\
    \
    def normalize_to_100g(self, df: pd.DataFrame) -> pd.DataFrame:\
        """100g 
\f5 \'b1\'e2\'c1\'d8\'c0\'b8\'b7\'ce
\f4  
\f5 \'c1\'a4\'b1\'d4\'c8\'ad
\f4 """\
        if '
\f5 \'b1\'e2\'c1\'d8\'b7\'ae
\f4 ' in df.columns:\
            factor = 100 / df['
\f5 \'b1\'e2\'c1\'d8\'b7\'ae
\f4 ']\
            nutrient_cols = ['potassium_mg', 'phosphorus_mg', 'sodium_mg']\
            for col in nutrient_cols:\
                if col in df.columns:\
                    df[col] = df[col] * factor\
        return df\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf0 5.3 PDF 
\f0\b0 \'b7\'b9\'bd\'c3\'c7\'c7
\f1\b  
\f0\b0 \'c3\'df\'c3\'e2
\f1\b  (
\f0\b0 \'b4\'eb\'c7\'d1\'bd\'c5\'c0\'e5\'c7\'d0\'c8\'b8
\f1\b )\
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 # pdf_extractor.py\
import pdfplumber\
import re\
from typing import List, Dict\
\
class RecipeExtractor:\
    """PDF
\f5 \'bf\'a1\'bc\'ad
\f4  
\f5 \'b7\'b9\'bd\'c3\'c7\'c7
\f4  
\f5 \'c3\'df\'c3\'e2
\f4 """\
    \
    def extract_recipes_from_pdf(self, pdf_path: str) -> List[Dict]:\
        """
\f5 \'bd\'c5\'c0\'e5\'c7\'d0\'c8\'b8
\f4  PDF
\f5 \'bf\'a1\'bc\'ad
\f4  
\f5 \'b7\'b9\'bd\'c3\'c7\'c7
\f4  
\f5 \'c3\'df\'c3\'e2
\f4 """\
        \
        recipes = []\
        \
        with pdfplumber.open(pdf_path) as pdf:\
            for page in pdf.pages:\
                text = page.extract_text()\
                \
                # 
\f5 \'b7\'b9\'bd\'c3\'c7\'c7
\f4  
\f5 \'c6\'d0\'c5\'cf
\f4  
\f5 \'c3\'a3\'b1\'e2
\f4 \
                recipe_blocks = self.find_recipe_blocks(text)\
                \
                for block in recipe_blocks:\
                    recipe = self.parse_recipe_block(block)\
                    if recipe:\
                        recipes.append(recipe)\
        \
        return recipes\
    \
    def parse_recipe_block(self, text: str) -> Dict:\
        """
\f5 \'b7\'b9\'bd\'c3\'c7\'c7
\f4  
\f5 \'ba\'ed\'b7\'cf
\f4  
\f5 \'c6\'c4\'bd\'cc
\f4 """\
        \
        recipe = \{\}\
        \
        # 
\f5 \'c1\'a6\'b8\'f1
\f4  
\f5 \'c3\'df\'c3\'e2
\f4 \
        title_pattern = r'[
\f5 \'b0\'a1
\f4 -
\f5 \'c6\'52
\f4 ]+(?:
\f5 \'ba\'ba\'c0\'bd
\f4 |
\f5 \'c1\'b6\'b8\'b2
\f4 |
\f5 \'b1\'b8\'c0\'cc
\f4 |
\f5 \'c2\'f2
\f4 |
\f5 \'b9\'ab\'c4\'a7
\f4 )'\
        title_match = re.search(title_pattern, text)\
        if title_match:\
            recipe['title'] = title_match.group()\
        \
        # 
\f5 \'c0\'e7\'b7\'e1
\f4  
\f5 \'c3\'df\'c3\'e2
\f4 \
        ingredients = self.extract_ingredients(text)\
        recipe['ingredients'] = ingredients\
        \
        # 
\f5 \'bf\'b5\'be\'e7\'c1\'a4\'ba\'b8
\f4  
\f5 \'c3\'df\'c3\'e2
\f4 \
        nutrition = self.extract_nutrition_info(text)\
        recipe['nutrition'] = nutrition\
        \
        return recipe\
    \
    def extract_ingredients(self, text: str) -> List[Dict]:\
        """
\f5 \'c0\'e7\'b7\'e1
\f4  
\f5 \'c1\'a4\'ba\'b8
\f4  
\f5 \'c3\'df\'c3\'e2
\f4 """\
        \
        ingredients = []\
        \
        # 
\f5 \'c6\'d0\'c5\'cf
\f4 : "
\f5 \'c0\'e7\'b7\'e1\'b8\'ed
\f4  
\f5 \'bc\'fd\'c0\'da
\f4 g" 
\f5 \'b6\'c7\'b4\'c2
\f4  "
\f5 \'c0\'e7\'b7\'e1\'b8\'ed
\f4  
\f5 \'bc\'fd\'c0\'da\'b0\'b3
\f4 "\
        pattern = r'([
\f5 \'b0\'a1
\f4 -
\f5 \'c6\'52
\f4 ]+)\\s*(\\d+)\\s*(g|
\f5 \'b0\'b3
\f4 |
\f5 \'c5\'ab\'bc\'fa
\f4 |
\f5 \'c0\'db\'c0\'ba\'bc\'fa
\f4 |
\f5 \'c4\'c5
\f4 )'\
        \
        matches = re.findall(pattern, text)\
        for name, amount, unit in matches:\
            ingredients.append(\{\
                'name': name,\
                'amount': float(amount),\
                'unit': unit\
            \})\
        \
        return ingredients\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf0 5.4 API 
\f0\b0 \'b5\'a5\'c0\'cc\'c5\'cd
\f1\b  
\f0\b0 \'bc\'f6\'c1\'fd
\f1\b  (
\f0\b0 \'bd\'c4\'be\'e0\'c3\'b3
\f1\b )\
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 # api_client.py\
import aiohttp\
import asyncio\
from typing import List, Dict\
import time\
\
class FoodSafetyAPIClient:\
    """
\f5 \'bd\'c4\'be\'e0\'c3\'b3
\f4  API 
\f5 \'c5\'ac\'b6\'f3\'c0\'cc\'be\'f0\'c6\'ae
\f4 """\
    \
    BASE_URL = "https://openapi.foodsafetykorea.go.kr/api"\
    \
    def __init__(self, api_key: str):\
        self.api_key = api_key\
        self.session = None\
        \
    async def fetch_all_foods(self) -> List[Dict]:\
        """
\f5 \'b8\'f0\'b5\'e7
\f4  
\f5 \'bd\'c4\'c7\'b0
\f4  
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'b0\'a1\'c1\'ae\'bf\'c0\'b1\'e2
\f4 """\
        \
        async with aiohttp.ClientSession() as session:\
            self.session = session\
            \
            # 
\f5 \'c0\'fc\'c3\'bc
\f4  
\f5 \'b0\'b3\'bc\'f6
\f4  
\f5 \'c8\'ae\'c0\'ce
\f4 \
            total_count = await self.get_total_count()\
            \
            # 
\f5 \'c6\'e4\'c0\'cc\'c1\'f6\'b3\'d7\'c0\'cc\'bc\'c7\'c0\'b8\'b7\'ce
\f4  
\f5 \'b8\'f0\'b5\'e7
\f4  
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'b0\'a1\'c1\'ae\'bf\'c0\'b1\'e2
\f4 \
            batch_size = 100\
            tasks = []\
            \
            for offset in range(0, total_count, batch_size):\
                task = self.fetch_batch(offset, batch_size)\
                tasks.append(task)\
                \
                # Rate limiting (10 requests per second)\
                if len(tasks) % 10 == 0:\
                    results = await asyncio.gather(*tasks)\
                    tasks = []\
                    await asyncio.sleep(1)\
            \
            if tasks:\
                results = await asyncio.gather(*tasks)\
            \
            return self.flatten_results(results)\
    \
    async def fetch_batch(self, start_idx: int, end_idx: int) -> Dict:\
        """
\f5 \'b9\'e8\'c4\'a1
\f4  
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'b0\'a1\'c1\'ae\'bf\'c0\'b1\'e2
\f4 """\
        \
        url = f"\{self.BASE_URL\}/\{self.api_key\}/FOOD_NUTRIENT/json/\{start_idx\}/\{end_idx\}"\
        \
        async with self.session.get(url) as response:\
            if response.status == 200:\
                data = await response.json()\
                return data.get('FOOD_NUTRIENT', \{\}).get('row', [])\
            else:\
                print(f"Error fetching batch \{start_idx\}-\{end_idx\}: \{response.status\}")\
                return []\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf0 5.5 
\f0\b0 \'c0\'a5
\f1\b  
\f0\b0 \'bd\'ba\'c5\'a9\'b7\'a1\'c7\'ce
\f1\b  (
\f0\b0 \'bf\'b5\'be\'e7\'bb\'e7\'c7\'f9\'c8\'b8
\f1\b )\
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 # web_scraper.py\
from bs4 import BeautifulSoup\
import requests\
from typing import List, Dict\
import time\
\
class NutritionistDataScraper:\
    """
\f5 \'bf\'b5\'be\'e7\'bb\'e7\'c7\'f9\'c8\'b8
\f4  
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'bd\'ba\'c5\'a9\'b7\'a1\'c7\'ce
\f4 """\
    \
    def scrape_diet_plans(self, url: str) -> List[Dict]:\
        """
\f5 \'bd\'c4\'b4\'dc
\f4  
\f5 \'b0\'e8\'c8\'b9
\f4  
\f5 \'bd\'ba\'c5\'a9\'b7\'a1\'c7\'ce
\f4 """\
        \
        diet_plans = []\
        \
        response = requests.get(url, headers=\{\
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\
        \})\
        \
        if response.status_code == 200:\
            soup = BeautifulSoup(response.content, 'html.parser')\
            \
            # 
\f5 \'bd\'c4\'b4\'dc
\f4  
\f5 \'c5\'d7\'c0\'cc\'ba\'ed
\f4  
\f5 \'c3\'a3\'b1\'e2
\f4 \
            tables = soup.find_all('table', class_='diet-table')\
            \
            for table in tables:\
                diet_plan = self.parse_diet_table(table)\
                if diet_plan:\
                    diet_plans.append(diet_plan)\
        \
        # Rate limiting\
        time.sleep(1)\
        \
        return diet_plans\
    \
    def parse_diet_table(self, table) -> Dict:\
        """
\f5 \'bd\'c4\'b4\'dc
\f4  
\f5 \'c5\'d7\'c0\'cc\'ba\'ed
\f4  
\f5 \'c6\'c4\'bd\'cc
\f4 """\
        \
        diet = \{\
            'meals': \{\},\
            'total_nutrition': \{\}\
        \}\
        \
        rows = table.find_all('tr')\
        for row in rows:\
            cells = row.find_all('td')\
            if len(cells) >= 2:\
                meal_type = cells[0].text.strip()\
                foods = cells[1].text.strip()\
                diet['meals'][meal_type] = foods\
        \
        return diet\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 6. 
\f0\b0 \'b0\'cb\'c1\'f5
\f1\b  
\f0\b0 \'b9\'d7
\f1\b  
\f0\b0 \'c7\'b0\'c1\'fa
\f1\b  
\f0\b0 \'b0\'fc\'b8\'ae
\f1\b \
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 6.1 
\f0\b0 \'b5\'a5\'c0\'cc\'c5\'cd
\f1\b  
\f0\b0 \'b0\'cb\'c1\'f5
\f1\b  
\f0\b0 \'c3\'bc\'c5\'a9\'b8\'ae\'bd\'ba\'c6\'ae
\f1\b \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 class DataValidator:\
    """
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'c7\'b0\'c1\'fa
\f4  
\f5 \'b0\'cb\'c1\'f5
\f4 """\
    \
    def validate_completeness(self, df: pd.DataFrame) -> Dict:\
        """
\f5 \'bf\'cf\'c0\'fc\'bc\'ba
\f4  
\f5 \'b0\'cb\'c1\'f5
\f4 """\
        return \{\
            'total_records': len(df),\
            'missing_values': df.isnull().sum().to_dict(),\
            'missing_percentage': (df.isnull().sum() / len(df) * 100).to_dict()\
        \}\
    \
    def validate_consistency(self, df: pd.DataFrame) -> Dict:\
        """
\f5 \'c0\'cf\'b0\'fc\'bc\'ba
\f4  
\f5 \'b0\'cb\'c1\'f5
\f4 """\
        issues = []\
        \
        # 
\f5 \'c4\'ae\'b7\'ce\'b8\'ae
\f4  
\f5 \'b0\'e8\'bb\'ea
\f4  
\f5 \'b0\'cb\'c1\'f5
\f4  (4-4-9 
\f5 \'b1\'d4\'c4\'a2
\f4 )\
        if all(col in df.columns for col in ['protein_g', 'carbohydrate_g', 'fat_g', 'calories_kcal']):\
            calculated_calories = (df['protein_g'] * 4 + \
                                 df['carbohydrate_g'] * 4 + \
                                 df['fat_g'] * 9)\
            \
            diff = abs(df['calories_kcal'] - calculated_calories)\
            inconsistent = df[diff > 10]  # 10kcal 
\f5 \'c0\'cc\'bb\'f3
\f4  
\f5 \'c2\'f7\'c0\'cc
\f4 \
            \
            if len(inconsistent) > 0:\
                issues.append(\{\
                    'type': 'calorie_calculation',\
                    'count': len(inconsistent),\
                    'samples': inconsistent.head(5).to_dict()\
                \})\
        \
        return issues\
    \
    def validate_ranges(self, df: pd.DataFrame) -> Dict:\
        """
\f5 \'b9\'fc\'c0\'a7
\f4  
\f5 \'b0\'cb\'c1\'f5
\f4 """\
        \
        range_rules = \{\
            'potassium_mg': (0, 5000),  # 0-5000mg/100g\
            'phosphorus_mg': (0, 2000),\
            'sodium_mg': (0, 10000),\
            'protein_g': (0, 100),\
            'calories_kcal': (0, 900)\
        \}\
        \
        violations = \{\}\
        for col, (min_val, max_val) in range_rules.items():\
            if col in df.columns:\
                out_of_range = df[(df[col] < min_val) | (df[col] > max_val)]\
                if len(out_of_range) > 0:\
                    violations[col] = len(out_of_range)\
        \
        return violations\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf0 6.2 
\f0\b0 \'c7\'b0\'c1\'fa
\f1\b  
\f0\b0 \'b8\'de\'c6\'ae\'b8\'af
\f1\b \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 def calculate_quality_metrics(df: pd.DataFrame) -> Dict:\
    """
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'c7\'b0\'c1\'fa
\f4  
\f5 \'b8\'de\'c6\'ae\'b8\'af
\f4  
\f5 \'b0\'e8\'bb\'ea
\f4 """\
    \
    metrics = \{\
        'completeness_score': 1 - (df.isnull().sum().sum() / (len(df) * len(df.columns))),\
        'uniqueness_score': len(df['food_name'].unique()) / len(df),\
        'consistency_score': 0.0,  # 
\f5 \'ba\'b0\'b5\'b5
\f4  
\f5 \'b0\'e8\'bb\'ea
\f4 \
        'accuracy_score': 0.0,      # 
\f5 \'bb\'f9\'c7\'c3\'b8\'b5
\f4  
\f5 \'b0\'cb\'c1\'f5
\f4  
\f5 \'c7\'ca\'bf\'e4
\f4 \
        'timeliness_score': 0.0     # 
\f5 \'c3\'d6\'bd\'c5\'bc\'ba
\f4  
\f5 \'c8\'ae\'c0\'ce
\f4 \
    \}\
    \
    # 
\f5 \'c0\'fc\'c3\'bc
\f4  
\f5 \'c7\'b0\'c1\'fa
\f4  
\f5 \'c1\'a1\'bc\'f6
\f4 \
    metrics['overall_quality'] = np.mean([\
        metrics['completeness_score'],\
        metrics['uniqueness_score']\
    ])\
    \
    return metrics\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 7. 
\f0\b0 \'bd\'c7\'c7\'e0
\f1\b  
\f0\b0 \'b0\'a1\'c0\'cc\'b5\'e5
\f1\b \
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 7.1 
\f0\b0 \'c8\'af\'b0\'e6
\f1\b  
\f0\b0 \'bc\'b3\'c1\'a4
\f1\b \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 # 1. 
\f5 \'b0\'a1\'bb\'f3\'c8\'af\'b0\'e6
\f4  
\f5 \'bb\'fd\'bc\'ba
\f4 \
python -m venv venv\
source venv/bin/activate  # Windows: venv\\Scripts\\activate\
\
# 2. 
\f5 \'c7\'ca\'bf\'e4
\f4  
\f5 \'c6\'d0\'c5\'b0\'c1\'f6
\f4  
\f5 \'bc\'b3\'c4\'a1
\f4 \
pip install -r requirements.txt\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf0 7.2 Requirements.txt\
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 pandas==2.0.3\
numpy==1.24.3\
pymongo==4.4.1\
psycopg2-binary==2.9.6\
sentence-transformers==2.2.2\
pdfplumber==0.9.0\
beautifulsoup4==4.12.2\
aiohttp==3.8.5\
openpyxl==3.1.2\
python-dotenv==1.0.0\
tqdm==4.65.0\
scikit-learn==1.3.0\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf0 7.3 
\f0\b0 \'bd\'c7\'c7\'e0
\f1\b  
\f0\b0 \'bd\'ba\'c5\'a9\'b8\'b3\'c6\'ae
\f1\b \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 # run_pipeline.py\
import asyncio\
import logging\
from pathlib import Path\
\
async def main():\
    """
\f5 \'b8\'de\'c0\'ce
\f4  
\f5 \'bd\'c7\'c7\'e0
\f4  
\f5 \'c7\'d4\'bc\'f6
\f4 """\
    \
    # 
\f5 \'b7\'ce\'b1\'eb
\f4  
\f5 \'bc\'b3\'c1\'a4
\f4 \
    logging.basicConfig(\
        level=logging.INFO,\
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\
    )\
    \
    # 
\f5 \'bc\'b3\'c1\'a4
\f4  
\f5 \'c6\'c4\'c0\'cf
\f4  
\f5 \'b0\'e6\'b7\'ce
\f4 \
    config_path = Path(__file__).parent / 'config.yaml'\
    \
    # 
\f5 \'c6\'c4\'c0\'cc\'c7\'c1\'b6\'f3\'c0\'ce
\f4  
\f5 \'bd\'c7\'c7\'e0
\f4 \
    pipeline = NutritionDataPipeline(str(config_path))\
    results = await pipeline.run_pipeline()\
    \
    # 
\f5 \'b0\'e1\'b0\'fa
\f4  
\f5 \'c3\'e2\'b7\'c2
\f4 \
    print(f"Pipeline completed successfully!")\
    print(f"Total records processed: \{results['total_records']\}")\
    print(f"Quality score: \{results['quality_score']:.2%\}")\
    \
if __name__ == "__main__":\
    asyncio.run(main())\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 8. 
\f0\b0 \'b8\'f0\'b4\'cf\'c5\'cd\'b8\'b5
\f1\b  
\f0\b0 \'b9\'d7
\f1\b  
\f0\b0 \'c0\'af\'c1\'f6\'ba\'b8\'bc\'f6
\f1\b \
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 8.1 
\f0\b0 \'b7\'ce\'b1\'d7
\f1\b  
\f0\b0 \'b0\'fc\'b8\'ae
\f1\b \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 # logging_config.py\
import logging.config\
\
LOGGING_CONFIG = \{\
    'version': 1,\
    'disable_existing_loggers': False,\
    'formatters': \{\
        'standard': \{\
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'\
        \},\
        'detailed': \{\
            'format': '%(asctime)s [%(levelname)s] %(name)s.%(funcName)s:%(lineno)d: %(message)s'\
        \}\
    \},\
    'handlers': \{\
        'console': \{\
            'class': 'logging.StreamHandler',\
            'level': 'INFO',\
            'formatter': 'standard',\
            'stream': 'ext://sys.stdout'\
        \},\
        'file': \{\
            'class': 'logging.handlers.RotatingFileHandler',\
            'level': 'DEBUG',\
            'formatter': 'detailed',\
            'filename': 'logs/pipeline.log',\
            'maxBytes': 10485760,  # 10MB\
            'backupCount': 5\
        \}\
    \},\
    'loggers': \{\
        '': \{\
            'handlers': ['console', 'file'],\
            'level': 'INFO',\
            'propagate': False\
        \}\
    \}\
\}\
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf0 8.2 
\f0\b0 \'c1\'a4\'b1\'e2
\f1\b  
\f0\b0 \'be\'f7\'b5\'a5\'c0\'cc\'c6\'ae
\f1\b  
\f0\b0 \'bd\'ba\'c4\'c9\'c1\'d9
\f1\b \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 # scheduler.py\
from apscheduler.schedulers.asyncio import AsyncIOScheduler\
from datetime import datetime\
\
class DataUpdateScheduler:\
    """
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'c1\'a4\'b1\'e2
\f4  
\f5 \'be\'f7\'b5\'a5\'c0\'cc\'c6\'ae
\f4  
\f5 \'bd\'ba\'c4\'c9\'c1\'d9\'b7\'af
\f4 """\
    \
    def __init__(self):\
        self.scheduler = AsyncIOScheduler()\
        \
    def setup_schedules(self):\
        """
\f5 \'bd\'ba\'c4\'c9\'c1\'d9
\f4  
\f5 \'bc\'b3\'c1\'a4
\f4 """\
        \
        # 
\f5 \'b8\'c5\'c0\'cf
\f4  
\f5 \'bb\'f5\'ba\'ae
\f4  3
\f5 \'bd\'c3
\f4  - 
\f5 \'bd\'c4\'be\'e0\'c3\'b3
\f4  API 
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'be\'f7\'b5\'a5\'c0\'cc\'c6\'ae
\f4 \
        self.scheduler.add_job(\
            self.update_api_data,\
            'cron',\
            hour=3,\
            minute=0\
        )\
        \
        # 
\f5 \'b8\'c5\'c1\'d6
\f4  
\f5 \'bf\'f9\'bf\'e4\'c0\'cf
\f4  - 
\f5 \'c0\'fc\'c3\'bc
\f4  
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'b0\'cb\'c1\'f5
\f4 \
        self.scheduler.add_job(\
            self.validate_all_data,\
            'cron',\
            day_of_week='mon',\
            hour=4,\
            minute=0\
        )\
        \
        # 
\f5 \'b8\'c5\'bf\'f9
\f4  1
\f5 \'c0\'cf
\f4  - 
\f5 \'c0\'d3\'ba\'a3\'b5\'f9
\f4  
\f5 \'c0\'e7\'bb\'fd\'bc\'ba
\f4 \
        self.scheduler.add_job(\
            self.regenerate_embeddings,\
            'cron',\
            day=1,\
            hour=2,\
            minute=0\
        )\
        \
    def start(self):\
        """
\f5 \'bd\'ba\'c4\'c9\'c1\'d9\'b7\'af
\f4  
\f5 \'bd\'c3\'c0\'db
\f4 """\
        self.scheduler.start()\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 9. 
\f0\b0 \'c6\'ae\'b7\'af\'ba\'ed\'bd\'b4\'c6\'c3
\f1\b \
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 9.1 
\f0\b0 \'c0\'cf\'b9\'dd\'c0\'fb\'c0\'ce
\f1\b  
\f0\b0 \'b9\'ae\'c1\'a6\'bf\'cd
\f1\b  
\f0\b0 \'c7\'d8\'b0\'e1
\f1\b \

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1865\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth1798\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth2805\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0

\f0\b0\fs24 \cf0 \'b9\'ae\'c1\'a6
\f1\b \cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0

\f0\b0 \cf0 \'bf\'f8\'c0\'ce
\f1\b \cell 
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0

\f0\b0 \cf0 \'c7\'d8\'b0\'e1
\f1\b  
\f0\b0 \'b9\'e6\'b9\'fd
\f1\b \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1865\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth1798\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth2805\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f3\b0 \cf0 Excel 
\f0 \'c0\'ce\'c4\'da\'b5\'f9
\f3  
\f0 \'bf\'c0\'b7\'f9
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'c7\'d1\'b1\'db
\f3  
\f0 \'c0\'ce\'c4\'da\'b5\'f9
\f3  
\f0 \'b9\'ae\'c1\'a6
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 encoding='utf-8-sig' 
\f0 \'bb\'e7\'bf\'eb
\f3 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1865\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth1798\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth2805\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 PDF 
\f0 \'c7\'a5
\f3  
\f0 \'c3\'df\'c3\'e2
\f3  
\f0 \'bd\'c7\'c6\'d0
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'ba\'b9\'c0\'e2\'c7\'d1
\f3  
\f0 \'b7\'b9\'c0\'cc\'be\'c6\'bf\'f4
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 tabula-py 
\f0 \'b6\'c7\'b4\'c2
\f3  camelot 
\f0 \'bb\'e7\'bf\'eb
\f3 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1865\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth1798\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth2805\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 API Rate Limit\cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'b0\'fa\'b5\'b5\'c7\'d1
\f3  
\f0 \'bf\'e4\'c3\'bb
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'c1\'f6\'bc\'f6
\f3  
\f0 \'b9\'e9\'bf\'c0\'c7\'c1
\f3  
\f0 \'b1\'b8\'c7\'f6
\f3 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1865\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth1798\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth2805\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'b8\'de\'b8\'f0\'b8\'ae
\f3  
\f0 \'ba\'ce\'c1\'b7
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'b4\'eb\'bf\'eb\'b7\'ae
\f3  
\f0 \'b5\'a5\'c0\'cc\'c5\'cd
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'c3\'bb\'c5\'a9
\f3  
\f0 \'b4\'dc\'c0\'a7
\f3  
\f0 \'c3\'b3\'b8\'ae
\f3 \cell \row

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1865\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth1798\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth2805\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f0 \cf0 \'c0\'d3\'ba\'a3\'b5\'f9
\f3  
\f0 \'bb\'fd\'bc\'ba
\f3  
\f0 \'bc\'d3\'b5\'b5
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 CPU 
\f0 \'c3\'b3\'b8\'ae
\f3 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf0 GPU 
\f0 \'bb\'e7\'bf\'eb
\f3  
\f0 \'b6\'c7\'b4\'c2
\f3  
\f0 \'b9\'e8\'c4\'a1
\f3  
\f0 \'c3\'b3\'b8\'ae
\f3 \cell \lastrow\row
\pard\pardeftab720\sa280\partightenfactor0

\f1\b\fs28 \cf0 9.2 
\f0\b0 \'b5\'a5\'c0\'cc\'c5\'cd
\f1\b  
\f0\b0 \'c7\'b0\'c1\'fa
\f1\b  
\f0\b0 \'c0\'cc\'bd\'b4
\f1\b \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 def fix_common_issues(df: pd.DataFrame) -> pd.DataFrame:\
    """
\f5 \'c0\'cf\'b9\'dd\'c0\'fb\'c0\'ce
\f4  
\f5 \'b5\'a5\'c0\'cc\'c5\'cd
\f4  
\f5 \'c0\'cc\'bd\'b4
\f4  
\f5 \'bc\'f6\'c1\'a4
\f4 """\
    \
    # 1. 
\f5 \'c0\'bd\'bc\'f6
\f4  
\f5 \'b0\'aa
\f4  
\f5 \'c3\'b3\'b8\'ae
\f4 \
    numeric_cols = df.select_dtypes(include=[np.number]).columns\
    df[numeric_cols] = df[numeric_cols].clip(lower=0)\
    \
    # 2. 
\f5 \'b1\'d8\'b4\'dc\'c0\'fb
\f4  
\f5 \'c0\'cc\'bb\'f3\'c4\'a1
\f4  
\f5 \'c4\'b8\'c7\'ce
\f4 \
    for col in ['potassium_mg', 'phosphorus_mg', 'sodium_mg']:\
        if col in df.columns:\
            q99 = df[col].quantile(0.99)\
            df[col] = df[col].clip(upper=q99 * 1.5)\
    \
    # 3. 
\f5 \'b9\'ae\'c0\'da\'bf\'ad
\f4  
\f5 \'c1\'a4\'b1\'d4\'c8\'ad
\f4 \
    if 'food_name' in df.columns:\
        df['food_name'] = df['food_name'].str.strip()\
        df['food_name'] = df['food_name'].str.replace(r'\\s+', ' ', regex=True)\
    \
    return df\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf0 10. 
\f0\b0 \'bc\'ba\'b0\'fa
\f1\b  
\f0\b0 \'c3\'f8\'c1\'a4
\f1\b \
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 10.1 KPI 
\f0\b0 \'c1\'a4\'c0\'c7
\f1\b \
\pard\pardeftab720\partightenfactor0

\f4\b0\fs26 \cf0 class PipelineMetrics:\
    """
\f5 \'c6\'c4\'c0\'cc\'c7\'c1\'b6\'f3\'c0\'ce
\f4  
\f5 \'bc\'ba\'b0\'fa
\f4  
\f5 \'c3\'f8\'c1\'a4
\f4 """\
    \
    @staticmethod\
    def calculate_kpis(start_time, end_time, results):\
        """KPI 
\f5 \'b0\'e8\'bb\'ea
\f4 """\
        \
        duration = (end_time - start_time).total_seconds()\
        \
        return \{\
            'processing_time': duration,\
            'records_per_second': results['total_records'] / duration,\
            'data_quality_score': results['quality_score'],\
            'coverage': results['source_coverage'],\
            'error_rate': results['errors'] / results['total_records'],\
            'embedding_success_rate': results['embedded'] / results['total_records']\
        \}\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf4 \strokec4 \
\pard\pardeftab720\sa240\partightenfactor0

\f0 \cf0 \strokec2 \'c0\'db\'bc\'ba\'c0\'cf
\f3 : 2025-01-17\uc0\u8232 
\f0 \'b9\'f6\'c0\'fc
\f3 : 1.0\uc0\u8232 
\f0 \'b4\'d9\'c0\'bd
\f1\b  
\f0\b0 \'be\'f7\'b5\'a5\'c0\'cc\'c6\'ae
\f3 : 
\f0 \'b5\'a5\'c0\'cc\'c5\'cd
\f3  
\f0 \'bc\'d2\'bd\'ba
\f3  
\f0 \'c3\'df\'b0\'a1
\f3  
\f0 \'bd\'c3
\f3 \

\f0 \'c0\'cc
\f3  
\f0 \'b9\'ae\'bc\'ad\'b4\'c2
\f3  
\f0 \'c4\'e1\'b4\'da
\f3  
\f0 \'bd\'c4\'c5\'b9
\f3  
\f0 \'c7\'c1\'b7\'ce\'c1\'a7\'c6\'ae\'c0\'c7
\f3  
\f0 \'b5\'a5\'c0\'cc\'c5\'cd
\f3  
\f0 \'c0\'fc\'c3\'b3\'b8\'ae
\f3  
\f0 \'b0\'fa\'c1\'a4\'c0\'bb
\f3  
\f0 \'c3\'bc\'b0\'e8\'c8\'ad\'c7\'d1
\f3  
\f0 \'b0\'a1\'c0\'cc\'b5\'e5\'c0\'d4\'b4\'cf\'b4\'d9
\f3 . 
\f0 \'bd\'c7\'c1\'a6
\f3  
\f0 \'b1\'b8\'c7\'f6
\f3  
\f0 \'bd\'c3
\f3  
\f0 \'b0\'a2
\f3  
\f0 \'b5\'a5\'c0\'cc\'c5\'cd
\f3  
\f0 \'bc\'d2\'bd\'ba\'c0\'c7
\f3  
\f0 \'c6\'af\'bc\'ba\'bf\'a1
\f3  
\f0 \'b8\'c2\'b0\'d4
\f3  
\f0 \'c1\'b6\'c1\'a4\'c0\'cc
\f3  
\f0 \'c7\'ca\'bf\'e4\'c7\'d2
\f3  
\f0 \'bc\'f6
\f3  
\f0 \'c0\'d6\'bd\'c0\'b4\'cf\'b4\'d9
\f3 .\
}